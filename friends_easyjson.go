// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3994edd1DecodeGithubComGobwasVk(in *jlexer.Lexer, out *University) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "country":
			out.Country = int(in.Int())
		case "city":
			out.City = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "faculty":
			out.Faculty = int(in.Int())
		case "faculty_name":
			out.FacultyName = string(in.String())
		case "chair":
			out.Chair = int(in.Int())
		case "chair_name":
			out.ChairName = string(in.String())
		case "graduation":
			out.Graduation = int(in.Int())
		case "education_form":
			out.EducationForm = string(in.String())
		case "education_status":
			out.EducationStatus = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3994edd1EncodeGithubComGobwasVk(out *jwriter.Writer, in University) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Country))
	}
	{
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.City))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"faculty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Faculty))
	}
	{
		const prefix string = ",\"faculty_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FacultyName))
	}
	{
		const prefix string = ",\"chair\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Chair))
	}
	{
		const prefix string = ",\"chair_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChairName))
	}
	{
		const prefix string = ",\"graduation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Graduation))
	}
	{
		const prefix string = ",\"education_form\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EducationForm))
	}
	{
		const prefix string = ",\"education_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EducationStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v University) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3994edd1EncodeGithubComGobwasVk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v University) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3994edd1EncodeGithubComGobwasVk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *University) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3994edd1DecodeGithubComGobwasVk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *University) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3994edd1DecodeGithubComGobwasVk(l, v)
}
func easyjson3994edd1DecodeGithubComGobwasVk1(in *jlexer.Lexer, out *LastSeen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int(in.Int())
		case "platform":
			out.Platform = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3994edd1EncodeGithubComGobwasVk1(out *jwriter.Writer, in LastSeen) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Time))
	}
	{
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Platform))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LastSeen) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3994edd1EncodeGithubComGobwasVk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LastSeen) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3994edd1EncodeGithubComGobwasVk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LastSeen) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3994edd1DecodeGithubComGobwasVk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LastSeen) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3994edd1DecodeGithubComGobwasVk1(l, v)
}
func easyjson3994edd1DecodeGithubComGobwasVk2(in *jlexer.Lexer, out *Friends) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Friend, 0, 1)
					} else {
						out.Items = []Friend{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Friend
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3994edd1EncodeGithubComGobwasVk2(out *jwriter.Writer, in Friends) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Friends) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3994edd1EncodeGithubComGobwasVk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Friends) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3994edd1EncodeGithubComGobwasVk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Friends) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3994edd1DecodeGithubComGobwasVk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Friends) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3994edd1DecodeGithubComGobwasVk2(l, v)
}
func easyjson3994edd1DecodeGithubComGobwasVk3(in *jlexer.Lexer, out *Friend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "sex":
			out.Sex = int(in.Int())
		case "bdate":
			out.Bdate = string(in.String())
		case "city":
			(out.City).UnmarshalEasyJSON(in)
		case "country":
			(out.Country).UnmarshalEasyJSON(in)
		case "timezone":
			out.Timezone = int(in.Int())
		case "photo_50":
			out.Photo50 = string(in.String())
		case "photo_100":
			out.Photo100 = string(in.String())
		case "photo_200_orig":
			out.Photo200Orig = string(in.String())
		case "has_mobile":
			out.HasMobile = int(in.Int())
		case "contacts":
			(out.Contacts).UnmarshalEasyJSON(in)
		case "education":
			(out.Education).UnmarshalEasyJSON(in)
		case "online":
			out.Online = int(in.Int())
		case "relation":
			out.Relation = int(in.Int())
		case "last_seen":
			(out.LastSeen).UnmarshalEasyJSON(in)
		case "status":
			out.Status = string(in.String())
		case "can_write_private_message":
			out.CanWritePrivateMessage = int(in.Int())
		case "can_see_all_posts":
			out.CanSeeAllPosts = int(in.Int())
		case "can_post":
			out.CanPost = int(in.Int())
		case "universities":
			if in.IsNull() {
				in.Skip()
				out.Universities = nil
			} else {
				in.Delim('[')
				if out.Universities == nil {
					if !in.IsDelim(']') {
						out.Universities = make([]University, 0, 1)
					} else {
						out.Universities = []University{}
					}
				} else {
					out.Universities = (out.Universities)[:0]
				}
				for !in.IsDelim(']') {
					var v4 University
					(v4).UnmarshalEasyJSON(in)
					out.Universities = append(out.Universities, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3994edd1EncodeGithubComGobwasVk3(out *jwriter.Writer, in Friend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sex))
	}
	{
		const prefix string = ",\"bdate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bdate))
	}
	{
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.City).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Country).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Timezone))
	}
	{
		const prefix string = ",\"photo_50\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo50))
	}
	{
		const prefix string = ",\"photo_100\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo100))
	}
	{
		const prefix string = ",\"photo_200_orig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo200Orig))
	}
	{
		const prefix string = ",\"has_mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HasMobile))
	}
	{
		const prefix string = ",\"contacts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Contacts).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"education\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Education).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"online\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Online))
	}
	{
		const prefix string = ",\"relation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Relation))
	}
	{
		const prefix string = ",\"last_seen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.LastSeen).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"can_write_private_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanWritePrivateMessage))
	}
	{
		const prefix string = ",\"can_see_all_posts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanSeeAllPosts))
	}
	{
		const prefix string = ",\"can_post\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CanPost))
	}
	{
		const prefix string = ",\"universities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Universities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Universities {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Friend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3994edd1EncodeGithubComGobwasVk3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Friend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3994edd1EncodeGithubComGobwasVk3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Friend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3994edd1DecodeGithubComGobwasVk3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Friend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3994edd1DecodeGithubComGobwasVk3(l, v)
}
func easyjson3994edd1DecodeGithubComGobwasVk4(in *jlexer.Lexer, out *Education) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "university":
			out.University = int(in.Int())
		case "university_name":
			out.UniversityName = string(in.String())
		case "faculty":
			out.Faculty = int(in.Int())
		case "faculty_name":
			out.FacultyName = string(in.String())
		case "graduation":
			out.Graduation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3994edd1EncodeGithubComGobwasVk4(out *jwriter.Writer, in Education) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"university\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.University))
	}
	{
		const prefix string = ",\"university_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UniversityName))
	}
	{
		const prefix string = ",\"faculty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Faculty))
	}
	{
		const prefix string = ",\"faculty_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FacultyName))
	}
	{
		const prefix string = ",\"graduation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Graduation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Education) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3994edd1EncodeGithubComGobwasVk4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Education) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3994edd1EncodeGithubComGobwasVk4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Education) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3994edd1DecodeGithubComGobwasVk4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Education) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3994edd1DecodeGithubComGobwasVk4(l, v)
}
func easyjson3994edd1DecodeGithubComGobwasVk5(in *jlexer.Lexer, out *Country) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3994edd1EncodeGithubComGobwasVk5(out *jwriter.Writer, in Country) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Country) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3994edd1EncodeGithubComGobwasVk5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Country) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3994edd1EncodeGithubComGobwasVk5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Country) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3994edd1DecodeGithubComGobwasVk5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Country) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3994edd1DecodeGithubComGobwasVk5(l, v)
}
func easyjson3994edd1DecodeGithubComGobwasVk6(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mobile_phone":
			out.Mobile = string(in.String())
		case "home_phone":
			out.Home = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3994edd1EncodeGithubComGobwasVk6(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mobile_phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"home_phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Home))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3994edd1EncodeGithubComGobwasVk6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3994edd1EncodeGithubComGobwasVk6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3994edd1DecodeGithubComGobwasVk6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3994edd1DecodeGithubComGobwasVk6(l, v)
}
func easyjson3994edd1DecodeGithubComGobwasVk7(in *jlexer.Lexer, out *City) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3994edd1EncodeGithubComGobwasVk7(out *jwriter.Writer, in City) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v City) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3994edd1EncodeGithubComGobwasVk7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v City) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3994edd1EncodeGithubComGobwasVk7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *City) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3994edd1DecodeGithubComGobwasVk7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *City) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3994edd1DecodeGithubComGobwasVk7(l, v)
}
